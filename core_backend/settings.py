"""
Django settings for core_backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = []
APP_DOMAIN = config('APP_DOMAIN', default=None) # Will be like 'your-app.herokuapp.com' or your custom domain
# APP_DOMAIN = '6a9f-41-57-97-104.ngrok-free.app' # Will be like 'your-app.herokuapp.com' or your custom domain
if DEBUG:
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])
if APP_DOMAIN:
    ALLOWED_HOSTS.append(APP_DOMAIN)
    ALLOWED_HOSTS.append(f"www.{APP_DOMAIN}")
else:
    # Fallback if APP_DOMAIN is somehow not set, though it should be
    if not DEBUG: # Only log if not in debug and APP_DOMAIN is missing
        print("WARNING: APP_DOMAIN environment variable is not set.")


# Application definition

INSTALLED_APPS = [
    'daphne',  # For running the ASGI server
    'corsheaders',  # For handling CORS headers
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels', 
    'channels_postgres', 
    'chapchat',
    'accounts',
    'sellers',
    'products',
    'whatsapp_comms',
    'orders',
    'rest_framework',
    'rest_framework_simplejwt', 
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS CONFIGURATION
CORS_ALLOWED_ORIGINS = [] # Start with an empty list

ALLOWED_HOSTS = [
    "6a9f-41-57-97-104.ngrok-free.app",
    "127.0.0.1",
    "chapchat-94s8.onrender.com",

]  # Add your ngrok URL or any other allowed hosts

# Get the frontend URL from the environment variables
FRONTEND_URL = config('FRONTEND_URL', default=None)

if DEBUG:
    # In development, allow the local Vue server
    CORS_ALLOWED_ORIGINS.extend([
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "https://6a9f-41-57-97-104.ngrok-free.app",  # Example ngrok URL, replace with your own if needed
    ])
elif FRONTEND_URL:
    # In production, only allow the deployed frontend URL
    CORS_ALLOWED_ORIGINS.append(FRONTEND_URL)
    
ROOT_URLCONF = 'core_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core_backend.wsgi.application'

ASGI_APPLICATION = 'core_backend.asgi.application'  # For WebSocket support


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL_ENV = config('DATABASE_URL', default=None)

if DATABASE_URL_ENV:
    # Production configuration using DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL_ENV,
            conn_max_age=600,
            ssl_require=config('DB_SSL_REQUIRE', default=True, cast=bool)
        )
    }
else:
    # Local development configuration using individual .env variables
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST', default='localhost'),
            'PORT': config('DB_PORT', default='5432', cast=int),
        }
    }

# Whatsapp API configuration
# These should be set in your .env file or environment variables
WHATSAPP_ACCESS_TOKEN = config('WHATSAPP_ACCESS_TOKEN', default='')
WHATSAPP_PHONE_NUMBER_ID = config('WHATSAPP_PHONE_NUMBER_ID', default='')
WHATSAPP_VERIFY_TOKEN = config('WHATSAPP_VERIFY_TOKEN', default='')

# Mpesa Pay configuration
MPESA_CONSUMER_KEY = config('MPESA_CONSUMER_KEY', default='')
MPESA_CONSUMER_SECRET = config('MPESA_CONSUMER_SECRET', default='')
MPESA_SHORTCODE = config('MPESA_SHORTCODE', default='')
MPESA_PASSKEY = config('MPESA_PASSKEY', default='')

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'accounts.User'  # Use the custom User model from accounts app

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Directory where Django will collect all static files

# WhiteNoise configuration for compressed static files (optional but good)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

if not DEBUG:
    # Production configuration using channels-postgres.
    # It requires the DATABASE_URL environment variable to be set.
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_postgres.core.PostgresChannelLayer",
            "CONFIG": {
                # This 'dsn' key is what channels-postgres uses to connect.
                # It gets the full connection URL directly from our environment variable.
                "dsn": config("DATABASE_URL"),
                # Set an expiry for messages in the channel layer (in seconds).
                "expiry": 30,
            },
        },
    }
    
else:
    # Development configuration using the simple in-memory layer.
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }